import { devLog } from './devLog.js';
// environmentDetector.js - Utilit√°rio centralizado para detec√ß√£o de ambiente
devLog('üîç Environment Detector: Inicializando...');

class EnvironmentDetector {
    constructor() {
        this.isElectron = null;
        this.capabilities = {};
        this.hasInitialized = false;
        this.initPromise = this.init();
    }

    async init() {
        if (this.hasInitialized) return this.capabilities;

        devLog('üîç Environment Detector: Verificando ambiente...');

        // Detectar se est√° no Electron (m√©todo robusto)
        this.isElectron = this.detectElectron();
        devLog('üñ•Ô∏è Environment Detector: √â Electron?', this.isElectron);

        // Verificar capacidades dispon√≠veis
        this.capabilities = {
            isElectron: this.isElectron,
            hasElectronAPI: !!(window.electronAPI),
            hasVideoAPI: !!(window.electronAPI?.video?.getVideoUrl),
            hasSystemAPI: !!(window.electronAPI?.system?.getSystemInfo),
            hasFileAPI: !!(window.electronAPI?.system?.fileExists),
            canAccessFiles: this.canAccessFiles(),
            isWeb: !this.isElectron,
            isDevelopment: typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'development'
        };

        devLog('üîç Environment Detector: Capacidades detectadas:', this.capabilities);
        this.hasInitialized = true;

        // ‚úÖ SOLU√á√ÉO DEFINITIVA: Valida√ß√£o m√≠nima inicial, valida√ß√£o completa em segundo plano
        if (this.isElectron) {
            // Valida√ß√£o ass√≠ncrona n√£o bloqueante para n√£o atrasar inicializa√ß√£o
            this.validateElectronAPIsAsync();
        }

        return this.capabilities;
    }

    detectElectron() {
        // M√©todo robusto para detectar Electron
        const userAgent = navigator.userAgent.toLowerCase();
        const hasElectronUA = userAgent.indexOf('electron') > -1;

        // Verificar se o processo principal est√° dispon√≠vel
        const hasProcess = typeof window !== 'undefined' && window.process && window.process.type;

        // Verificar se existe API espec√≠fica do Electron
        const hasElectronAPI = !!(window.electronAPI && window.electronAPI.isElectron);

        devLog('üîç Detection checks:', {
            userAgent: hasElectronUA,
            process: !!hasProcess,
            api: hasElectronAPI
        });

        return hasElectronUA || hasProcess || hasElectronAPI;
    }

    canAccessFiles() {
        // Verificar se pode acessar arquivos locais
        if (!this.isElectron) return false;

        // No Electron, verificar se as APIs de arquivo existem
        return !!(window.electronAPI?.system?.fileExists);
    }

    async validateElectronAPIs() {
        if (!this.isElectron) return;

        devLog('üîç Environment Detector: Validando APIs do Electron...');

        // ‚úÖ VALIDA√á√ÉO ROBUSTA: Apenas verificar exist√™ncia, n√£o executar
        try {
            if (window.electronAPI?.system?.getSystemInfoSync) {
                devLog('‚úÖ getSystemInfoSync dispon√≠vel (n√£o executado)');
                this.capabilities.hasSystemAPI = true;
            } else if (window.electronAPI?.system?.getSystemInfo) {
                devLog('‚úÖ getSystemInfo dispon√≠vel (n√£o executado)');
                this.capabilities.hasSystemAPI = true;
            } else {
                devLog('üîç getSystemInfo n√£o dispon√≠vel imediatamente - ser√° validado pelo apiService');
                // N√£o marcar como erro - deixar para o apiService decidir
            }
        } catch (error) {
            devLog('üîç getSystemInfo n√£o dispon√≠vel - ser√° tratado pelo apiService');
        }

        // Verifica√ß√£o de APIs de v√≠deo - abordagem n√£o executiva
        if (window.electronAPI?.video?.getVideoUrl) {
            devLog('‚úÖ getVideoUrl dispon√≠vel no preload (n√£o executado)');
            this.capabilities.hasVideoAPI = true;
        } else {
            devLog('üîç getVideoUrl n√£o dispon√≠vel imediatamente - ser√° validado pelo apiService');
            // N√£o marcar como erro - deixar para o apiService decidir
        }

        // Verifica√ß√£o de APIs de arquivo
        if (window.electronAPI?.system?.fileExistsSync) {
            devLog('‚úÖ fileExistsSync dispon√≠vel');
            this.capabilities.hasFileAPI = true;
        } else if (window.electronAPI?.system?.fileExists) {
            devLog('‚úÖ fileExists dispon√≠vel (ass√≠ncrono)');
            this.capabilities.hasFileAPI = true;
        }
    }

    // ‚úÖ VALIDA√á√ÉO COMPLETAMENTE ASS√çNCRONA: N√£o executar durante inicializa√ß√£o cr√≠tica
    validateElectronAPIsAsync() {
        // Delay maior para garantir que o contexto IPC esteja totalmente estabelecido
        setTimeout(() => {
            this.validateElectronAPIs().then(() => {
                devLog('üîç Environment Detector: Valida√ß√£o ass√≠ncrona conclu√≠da');
                devLog('üîç Environment Detector: Capacidades finais:', this.capabilities);
            }).catch(error => {
                devLog('üîç Environment Detector: Valida√ß√£o ass√≠ncrona n√£o cr√≠tica falhou - ser√° tratada pelo apiService');
            });
        }, 500); // Delay maior para m√°xima seguran√ßa
    }

    async getCapabilities() {
        await this.initPromise;
        return { ...this.capabilities };
    }

    async waitForElectronAPIs(maxWaitTime = 5000) {
        if (!this.isElectron) return false;

        devLog('‚è≥ Environment Detector: Aguardando APIs do Electron...');

        const startTime = Date.now();
        const checkInterval = 200;

        while (Date.now() - startTime < maxWaitTime) {
            await new Promise(resolve => setTimeout(resolve, checkInterval));

            const hasAllAPIs = !!(window.electronAPI?.video?.getVideoUrl &&
                                 window.electronAPI?.system?.getSystemInfo &&
                                 window.electronAPI?.system?.fileExists);

            if (hasAllAPIs) {
                devLog('‚úÖ Environment Detector: APIs do Electron dispon√≠veis');
                return true;
            }
        }

        devLog('‚è∞ Environment Detector: Timeout aguardando APIs do Electron');
        return false;
    }

    getEnvironmentInfo() {
        return {
            isElectron: this.isElectron,
            isWeb: !this.isElectron,
            userAgent: navigator.userAgent,
            platform: navigator.platform,
            hasInitialized: this.hasInitialized,
            capabilities: this.capabilities
        };
    }
}

// Criar inst√¢ncia global
const environmentDetector = new EnvironmentDetector();

// Exportar fun√ß√µes convenientes
export const isElectron = () => environmentDetector.isElectron;
export const isWeb = () => !environmentDetector.isElectron;
export const getCapabilities = () => environmentDetector.getCapabilities();
export const waitForElectronAPIs = (maxWaitTime) => environmentDetector.waitForElectronAPIs(maxWaitTime);
export const getEnvironmentInfo = () => environmentDetector.getEnvironmentInfo();

export default environmentDetector;